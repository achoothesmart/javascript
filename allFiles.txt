
$FILE : POS.html
<html>
<head>
    <title>POS</title>
    <style style="display: block" contenteditable>
        body {
            background-color: lightskyblue;
            user-select: none;
        }

        .txtbox {
            font-size: large;
            border-radius: 5px;
            width: 500px;
            padding: 5px;
        }

        .button {
            font-size: large;
            border-radius: 5px;
            padding: 5px;
        }

        .item {
            font-size: large;
            cursor: pointer;
        }

        .selected {
            font-weight: bold;
            color: rgb(10, 17, 150);
        }

        .txtQuantity {
            font-size: small;
            border-radius: 4px;
            width: 50px;
            padding: 2px;
        }
    </style>

    
</head>

<body>
    <h2>Fruit Shop - Billing</h2>
    <div>
        <table cellspacing="50">
            <tr>
                <td style="vertical-align: top">
                    <h3>Select Items to purchase</h3>
                    <ol id="lstItems"></ol>
                    <input id="btnPrintBill" class="button" type="button" value="Print Bill" />
                </td>
                <td> 
                    <table id="tblSelectedItems" cellspacing="10" cellpadding="1">
                        <tr> <th>SNo</th> <th>Item</th> <th>Quantity</th> <th>Price</th> <th>Cost</th> </tr>
                    </table> 
                    <table id="tblTotal" style="width:100%; border:solid; font-weight:bold">
                        <tr style="text-align:right;">
                            <td>Total</td>
                            <td>
                                <span id="totalCost">00.00</span> INR
                            </td>
                        </tr>
                    </table>
                    
                </td>
            </tr>
        </table>
        
    </div>

    <script>

        let lstItems = document.getElementById('lstItems');
        let tblSelectedItems = document.getElementById('tblSelectedItems');
        let btnPrintBill = document.getElementById('btnPrintBill');

        let items = [
            { name: "Apple", price: 60, unit: "KG", currency: "INR" },
            { name: "Orange", price: 45, unit: "KG", currency: "INR" },
            { name: "Grapes", price: 55, unit: "KG", currency: "INR" },
            { name: "Strawberry", price: 70, unit: "KG", currency: "INR" },
            { name: "Pomogranade", price: 50, unit: "KG", currency: "INR" }
        ];
        let selectedItems = [];
        let props = ['name', 'price', 'unit', 'currency'];

        loadItems();

        function loadItems() {
            items.forEach((item) => {
                let li = document.createElement('li');
                li.classList.add('item');
                li.innerText = item.name + ' - ' + item.price + ' ' + item.currency + ' / ' + item.unit;
                props.forEach((prop) => {
                    li.setAttribute(prop, item[prop]);
                });

                li.addEventListener('click', (event) => { itemClick(li) });

                lstItems.appendChild(li);
            });
        }

        function itemClick(li) {
            if (!li.classList.contains('selected')) {
                addItemToList(li.cloneNode(true));
                li.classList.add('selected');
            }
            else {
                removeItemFromList(li);
                li.classList.remove('selected');
            }
        }

        function addItemToList(li) {
            //li.innerText = li.attributes['name'].value;
            let item = items.filter(i => i.name == li.attributes['name'].value)[0];
            if (item == undefined || item.name == undefined) {
                console.error('Invalid Item!');
                return;
            }
            selectedItems.push(item);
            li.innerHTML = '';
            li = null;

            let tr = document.createElement('tr');
            tr.setAttribute('name', item.name);

            let td1 = document.createElement('td');
            let td2 = document.createElement('td');
            let td3 = document.createElement('td');
            let td4 = document.createElement('td');
            let td5 = document.createElement('td');

            td1.classList.add('sno');
            td2.classList.add('name');
            td3.classList.add('quantity');
            td4.classList.add('price');
            td5.classList.add('cost');

            td1.innerText = tblSelectedItems.querySelectorAll('tr').length;
            td2.innerText = item.name;

            let txtQuantity = document.createElement('input');
            txtQuantity.id = item.name + '_quantity';
            txtQuantity.type = 'number';
            txtQuantity.classList.add('txtQuantity');
            txtQuantity.min = '1';
            txtQuantity.value = '1';
            txtQuantity.addEventListener('change', () => { onQuantityChange(item) });
            td3.appendChild(txtQuantity);

            let price = document.createElement('span');
            price.id = item.name + '_price';
            price.innerText = item.price;
            td4.appendChild(price);

            let cost = document.createElement('span')
            cost.id = item.name + '_cost';
            //cost.classList.add('cost'); // dont include this line, cost class is counted for total
            cost.innerText = item.price;
            td5.appendChild(cost);

            tr.appendChild(td1);
            tr.appendChild(td2);
            tr.appendChild(td3);
            tr.appendChild(td4);
            tr.appendChild(td5);

            tblSelectedItems.appendChild(tr);

            updateTotal();
        }

        function removeItemFromList(li) {
            let name = li.attributes['name'].value;
            let trRemove = document.getElementById('tblSelectedItems').querySelector('[name=' + name + ']');
            trRemove.remove();
            renumber();
            updateTotal();
        }

        function onQuantityChange(item) {
            let newQuantity = Number.parseFloat( document.querySelector('#'+item.name + '_quantity').value );
            //console.log(newQuantity);
            item.quantity = newQuantity;
            updateCost(item);
        }

        function updateCost(item) {
            let cost = item.price * item.quantity;
            //console.log(cost);
            document.querySelector('#' + item.name + '_cost').innerText = cost;

            updateTotal();
        }

        function updateTotal() {
            let total = 0.00;
            document.querySelectorAll('.cost').forEach((c) => {
                //console.log(c.innerText);
                total += Number.parseFloat(c.innerText);
            });

            document.querySelector('#totalCost').innerText = getCurrencyString(total);
        }

        function getCurrencyString(num) {
            let res = [];
            let currStr = (num + '');
            let numCurr = currStr.split('.')[0];
            let decCurr = currStr.split('.')[1];
            console.log(currStr);
            console.log(numCurr);
            console.log(decCurr);
            numCurr.split('').reverse().forEach((d, index) => {
                if ((index == 3) || (index > 3 && index % 2 == 1)) {
                    res.push(',');
                }
                res.push(d);
            });

            currStr = res.reverse().join('');
            if (decCurr != undefined) {
                currStr += '.' + decCurr;
            }
            return currStr;
        }

        function renumber() {
            let i = 1;
            document.querySelectorAll('.sno').forEach((tdsno) => {
                tdsno.innerText = i++;
            });
        }

        btnPrintBill.addEventListener('click', () => {
            printBill();
        });

        function printBill() {
            let tblPrint = tblSelectedItems.cloneNode(true);
            tblPrint.querySelectorAll('td').forEach((td) => {
                if (td.classList.contains('quantity')) {
                    td.innerHTML = td.querySelector('input').value + ' x';
                }
                if (td.classList.contains('price')) {
                    td.innerHTML = td.querySelector('span').innerText + ' =';
                }
            });

            let totalRow = document.getElementById('tblTotal').querySelector('tr').cloneNode(true);
            totalRow.querySelector('td').setAttribute('colspan', '4');
            tblPrint.appendChild(totalRow);

            tblPrint.setAttribute('style','text-align: left')

            var printWindow = window.open('', 'PRINT');
            printWindow.document.write("<h2>Fruit Shop<h2> <h4>Bill Date: " + (new Date()).toLocaleDateString() + "</h2>");
            printWindow.document.write(tblPrint.outerHTML);
            printWindow.print();
            printWindow.close();
            tblPrint.innerHTML = '';
        }
    </script>
</body>

</html>
$FILEEND
$FILE : QuickNotes.html
<html>
<head>
    <title>Quick Notes</title>
    <style>
        body{
            background-color: lightskyblue;
            user-select: none;
        }
        .txtbox {
            font-size: large;
            border-radius: 5px;
            width: 500px;
            padding: 5px;
        }

        .button {
            font-size: large;
            border-radius: 5px;
            padding: 5px;
        }
        .notes {
            font-size: large;
            cursor: pointer;
        }
        .note:hover{
            /*color: white;*/
        }
        .note:active, .selected {
            font-weight: bold;
            color: rgb(10, 17, 150);
        }

        .note.unsaved {
            color: darkgreen;
        }

        .overlay {
            width: 100%;
            height: 100%;
            background-color: rgba(128, 128, 128, 0.5);
            
            position: fixed;
            top: 0px;
            left: 0px;

        }

        .dialog{
            width: 50%;
            height: 50%;
            position: fixed;
            left: 25%;
            top: 25%;
            background-color: gray;
            padding: 15px;
            border-radius: 10px;
        }

        .txtArea{
            width:100%;
            height: 100%;
        }

        .hidden{
            display: none;
        }

        #txtmsg{
            position: fixed;
            top: 10%;
            left: 25%;
            color: black;
            background-color: white;
            padding: 5px;
            border-radius: 5px;
        }

        .search{
            background-color: yellow;
        }

        .badge{
            background-color: rgb(7, 122, 247);
            border-radius: 10px;
            color: white;
            padding: 4px;
        }

        #txtEditNote {
            font-size: large;
            border-radius: 5px;
            height: 90%;
            padding: 5px;
            border-spacing: 50px;
        }



        /*#xClose{
            position: fixed;
            text-align: right;
            cursor: pointer;
            font-size: large;
            color: black;
            border-color: black;
        }*/
    </style>



</head>
<body>
    <div>
        <input id="btnSave" type="button" class="button" value="Save" />
        <!--<input id="btnClear" type="button" class="button" value="Clear" />-->
        <input id="btnRemove" type="button" class="button" value="Remove All" />
        <input id="btnExport" type="button" class="button" value="Export" />
        <input id="txtSearch" class="txtbox" placeholder="Search Notes" />
        <input id="btnClearSearch" type="button" class="button hidden" value="X" />

        <span id="foundCount" class="badge hidden"></span>
        <span id="lblSelectedCount" class="badge hidden"></span>

    </div>
    <div>
        <ul id="lstNotes" class="notes"></ul>
        <ul id="lstNotesSearch" class="notes hidden"></ul>
    </div>
    <div>

        <textarea id="txtNote" rows="2" cols="20" class="txtbox" placeholder="Type Notes & Press Enter"></textarea>
        <!--<input id="txtNote" type="text" class="txtbox" placeholder="Type Notes & Press Enter" />-->
        
    </div>

    <div id="editOverlay" class="overlay hidden">
        <div class="dialog">
            <textarea id="txtEditNote" class="txtArea" placeholder="Editing.."></textarea>
            <input id="btnSaveEdit" type="button" class="button" value="Save" />
            <input id="btnCancelEdit" type="button" class="button" value="Cancel" />
        </div>
    </div>

    <div id="exportOverlay" class="overlay hidden">
        <span id="txtmsg">Text Copied to the Clipboard</span>
        <div id="dialog" class="dialog">
            <!--<div id="xClose">X</div>-->

            <textarea id="txtExport" class="txtArea"></textarea>
        </div>
    </div>

    <script>
        // Globals
        var txtNote = document.getElementById('txtNote');
        var lstNotes = document.getElementById('lstNotes');
        var btnSave = document.getElementById('btnSave');
        //var btnClear = document.getElementById('btnClear');
        var btnRemove = document.getElementById('btnRemove');
        var btnExport = document.getElementById('btnExport');
        var txtExport = document.getElementById('txtExport');
        var txtSearch = document.getElementById('txtSearch');
        var btnClearSearch = document.getElementById('btnClearSearch');
        
        var txtEditNote = document.getElementById('txtEditNote');

        var note;
        var filtered = false;
        var notesHtml;
        var selectedCount = 0;

        loadNotes();

        // Events

        txtNote.addEventListener('keypress', (event) => {
            //console.log(event.keyCode);
            if (event.keyCode == 13) { // Enter Key
                addNote(txtNote.value, false);
                txtNote.value = '';
            }
        });

        txtNote.addEventListener('keyup', (event) => {
            //console.log(event.keyCode);
            if (event.keyCode == 13 || event.keyCode == 27) { // Enter Key
                txtNote.value = '';
            }
        });

        btnSave.addEventListener('click', () => {
            saveNotes();
        });
        
        //btnClear.addEventListener('click', () => {
        //    lstNotes.innerHTML = '';
        //    txtNote.value = '';
        //});

        btnRemove.addEventListener('click', () => {
            if (selectedCount == 0) {
                // clear all
                lstNotes.innerHTML = '';
                txtNote.value = '';
            }
            else {
                document.querySelectorAll("#lstNotes .selected").forEach((sel) => sel.remove());
            }
            stateChanged();
        });

        btnExport.addEventListener('click', () => {
            exportNotes();
        });

        btnClearSearch.addEventListener('click', () => {
            clearFilter();
        });

        document.querySelector('#exportOverlay').addEventListener('mousedown', () => {
            document.getElementById('exportOverlay').classList.add('hidden');
        });

        document.querySelector('#exportOverlay #txtExport').addEventListener('mousedown', (e) => {
            e.stopPropagation();
        });

        txtSearch.addEventListener('keyup', (event) => {
            //console.log(event.keyCode);
            if (txtSearch.value.trim() == '' || event.keyCode == 27) {
                clearFilter();
            }
            else {
                filterNotes(txtSearch.value);
            }
        });

        // Functions

        function addNote(noteText, isPageLoad) {
            if (noteText.trim() != '') {
                noteText = noteText.trim();
                if (!isPageLoad && noteText.charAt(0) == '$') {
                    // a command
                    console.log('Executing command ' + noteText);
                    executeCommand(noteText);
                }
                else {
                    noteText.split('\n').forEach(function (line) {
                        if (line.trim() != '') {
                            var noteItem = document.createElement('li');
                            noteItem.innerText = line;
                            noteItem.classList.add('note');
                            if (!isPageLoad) {
                                noteItem.classList.add('unsaved');
                            }
                            noteItem.addEventListener('click', () => noteClick(noteItem));
                            noteItem.addEventListener('dblclick', () => noteDblClick(noteItem));
                            lstNotes.appendChild(noteItem)
                        }

                    });

                    //saveNotes();
                    note = noteText;
                }
            }
        }

        function executeCommand(cmd) {
            switch (cmd) {
                case '$save':
                    saveNotes();
                    break;
                case '$export':
                    exportNotes();
                    document.execCommand("undo");
                    break;
            }
        }

        function noteClick(noteItem) {
            //console.log(noteItem);
            if (noteItem.classList.contains('selected')){
                noteItem.classList.remove('selected');
            }
            else {
                noteItem.classList.add('selected');
            }
            stateChanged();
        }

        function noteDblClick(noteItem) {
            let txt = noteItem.innerText;
            document.querySelector('#editOverlay').classList.remove('hidden');
            txtEditNote.value = txt;
            //noteItem.innerHTML = '';
            //let txtEdit = document.createElement('input');
            //txtEdit.classList.add('txtbox');
            //txtEdit.value = txt;
            //noteItem.appendChild(txtEdit);
        }

        function saveNotes() {
            var arrNotes = [];
            lstNotes.querySelectorAll('li').forEach(function (item) {
                item.classList.remove('unsaved');
                arrNotes.push(item.innerText);
            });
            localStorage.setItem('quick_notes', JSON.stringify(arrNotes));
        }

        function loadNotes() {
            var arrNotes = JSON.parse(localStorage.getItem('quick_notes'));
            if (arrNotes != null) {
                arrNotes.forEach(function (item) {
                    addNote(item, true);

                });
            }
        }

        function exportNotes() {
            //console.log('working..')
            document.getElementById('exportOverlay').classList.remove('hidden');
            txtExport.value = '';

            let toExport;
            if (selectedCount == 0) {
                toExport = lstNotes.querySelectorAll('li');
            }
            else {
                toExport = lstNotes.querySelectorAll('li.selected');
            }

            toExport.forEach(function (item) {
                txtExport.value += item.innerText + '\n';
            });
            txtExport.select();
            document.execCommand('copy');
        }

        function filterNotes(strSearch) {
            document.getElementById('lstNotes').classList.add('hidden');
            document.getElementById('lstNotesSearch').classList.remove('hidden');
            btnClearSearch.classList.remove('hidden');

            var arr = document.querySelectorAll('#lstNotes .note');
            var res = Array.from(arr).map((li) => li).filter((li) => li.textContent.toLocaleLowerCase().includes(strSearch.toLocaleLowerCase()))

            document.getElementById('lstNotesSearch').innerHTML = '';
            var count = 0;
            res.forEach((li) => {
                var sli = li.cloneNode(true);
                sli.addEventListener('click', () => noteClick(sli));
                sli.addEventListener('dblclick', () => noteDblClick(sli));
                //var regex = new RegExp(strSearch,'gi');
                //sli.innerHTML = sli.innerHTML.replace(regex, '<span class="search">' + strSearch + '</span>');
                var obj = replaceByCover(sli.innerHTML, strSearch, '<span class="search">', '</span>', count);
                sli.innerHTML = obj.result;
                count = obj.count;
                document.getElementById('lstNotesSearch').appendChild(sli);
            }); 

            displayBadge('foundCount', 'Found ' + count + ' matches');
        }

        function clearFilter() {
            document.getElementById('lstNotes').classList.remove('hidden');
            document.getElementById('lstNotesSearch').classList.add('hidden');
            document.getElementById('lstNotesSearch').innerHTML = '';
            txtSearch.value = '';
            displayBadge('foundCount','');
            btnClearSearch.classList.add('hidden');
            stateChanged();
        }

        function replaceByCover(str, search, prefix, postfix, count) {
            if (count == undefined) { count = 0;}
            var cut_off = 0;
            var rem_str = str;
            var new_str = "";
            var extra = prefix.length + postfix.length;

            // to avoid unexpected infinite loop, set a overflow point
            var overflow = 100;
            var loop = 0;
            
            while (cut_off <= str.length - 1) {
                if (++loop >= overflow) { console.error('Overflow'); break; }

                var found_i = rem_str.toLowerCase().indexOf(search.toLowerCase(), 0);

                if (found_i == -1) {
                    break;
                }
                else {
                    ++count;
                }

                var found_str = rem_str.substr(found_i, search.length);
                cut_off = found_i + search.length;
                rem_str = rem_str.replace(found_str, prefix + found_str + postfix);
                cut_off += extra;
                new_str += rem_str.substr(0, cut_off);
                rem_str = rem_str.substr(cut_off, str.length - cut_off + extra);
            }
            return {
                result: new_str + rem_str,
                count: count
            };
        }

        function stateChanged() {
            selectedCount = lstNotes.querySelectorAll(".note.selected").length;

            if (selectedCount > 0) {
                btnRemove.value = 'Remove Selected';
                btnExport.value = 'Export Selected';
                displayBadge('lblSelectedCount', selectedCount + ' notes selected');
            }
            else { // none selected
                btnRemove.value = 'Remove All';
                btnExport.value = 'Export';
                displayBadge('lblSelectedCount', '');
            }
        }

        function displayBadge(badge_id, txt) {
            var badge = document.getElementById(badge_id);
            if (txt.trim() != '') {
                badge.classList.remove('hidden');
                badge.innerText = txt;
            }
            else {
                badge.classList.add('hidden');
            }
        }
    </script>
</body>
</html>
$FILEEND
$FILE : ViewAsFiles.html
<html>
<head>
    <title>View as Files</title>
    <style>
        .txtbox {
            font-size: large;
            border-radius: 5px;
            width: 500px;
            padding: 5px;
        }

        .button {
            font-size: large;
            border-radius: 5px;
            padding: 5px;
        }

        .file_name {
            padding: 5px;
            cursor: pointer;
            border-style: solid;
            border-width: thin;
            border-spacing: 2px;
            display: inline-flex;
            border-top-left-radius: 10px;
            /*border-top-right-radius: 10px;*/
        }

        .file_name:active, .selected {
            background-color: purple;
            color: white;
        }

        #fileViewer{
            padding : 10px;
        }

        .new{
            background-color: forestgreen;
            color: white;
        }
    </style>
</head>
<body>
    <textarea id="filesInput" rows="10" cols="100"></textarea> <br/>
    <input id="btnCreate" type="button" class="button" value="View As Files" />
    <input id="btnNewFile" type="button" class="button" value="+ New File" />
    <input id="btnSaveFile" type="button" class="button" value="Save File" disabled />
    <div id="lstFiles">

    </div>
    <textarea id="fileViewer" rows="20" cols="100"></textarea>

    <script>
        let files = {}
        let fileNames = [];

        function $(selector) {
            return document.querySelector(selector);
        }
        function $all(selector) {
            return document.querySelectorAll(selector);
        }

        $('#btnCreate').addEventListener('click', () => {
            createFiles();
        });

        $('#btnNewFile').addEventListener('click', () => {
            addNewFile();
        });
        $('#btnSaveFile').addEventListener('click', () => {
            saveFile();
        });

        function createFiles() {
            files = {};
            fileNames = [];
            let isFile = false;
            let currFileName;
            let currFileContent;

            $('#filesInput').value.split('\n').forEach((line) => {
                if (line.charAt(0) == '$') {
                    // command - $FILE
                    let arr = line.split(':');

                    switch (arr[0].trim()) {
                        case '$FILE':
                            isFile = true;
                            fileNames.push(arr[1].trim());
                            currFileName = arr[1].trim();
                            currFileContent = '';
                            break;

                        case '$FILEEND':
                            files[currFileName] = currFileContent;
                            isFile = false;
                            currFileName = undefined;
                            currFileContent = '';
                            break;
                    }
                }
                else {
                    // normal line
                    if (isFile) {
                        currFileContent += line + '\n';
                    }
                }
            });

            reset();
            fileNames.forEach((fileName) => {
                let div = document.createElement('div');
                div.classList.add('file_name');
                div.innerText = fileName;
                div.addEventListener('click', (event) => {
                    $all('.file_name').forEach((file_lbl) => {
                        file_lbl.classList.remove('selected')
                    });
                    event.target.classList.add('selected');
                    loadFileContent(event.target.innerText);
                });
                $('#lstFiles').appendChild(div)
            });

        }

        function loadFileContent(fileName) {
            $('#fileViewer').value = files[fileName];
        }

        function addNewFile() {
            let div = document.createElement('div');
            div.classList.add('file_name', 'new');
            div.innerText = 'New File';

            $('#lstFiles').appendChild(div);
            $('#btnNewFile').disabled = true;
            $('#btnSaveFile').disabled = false;
            $('#fileViewer').value = '';
        }

        function saveFile() {
            let fileName = prompt("Enter File Name");
            //console.log(fileName);
            if (fileName != null && fileName.trim() != "") {
                console.log('saving ' + fileName);
                $('#filesInput').value += '\n$FILE : ' + fileName + '\n' + $('#fileViewer').value + '\n$FILEEND';
                alert('File Saved Successfully');
                
                
                createFiles();
            }
        }

        function reset() {
            $('#lstFiles').innerHTML = '';
            $('#fileViewer').value = '';
            $('#btnNewFile').disabled = false;
            $('#btnSaveFile').disabled = true;
        }
    </script>
</body>
</html>
$FILEEND

$FILE : Random.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Button } from './Button';

class Random extends React.Component {
  constructor(props){
    super(props);
    this.state = { color: [220, 150, 90] };
    this.handleClick = this.handleClick.bind(this);
  }
  
  componentDidMount() {
    this.applyColor();
  }

  componentDidUpdate(prevProps, prevState) {
    this.applyColor();
  }

  formatColor(ary) {
    return 'rgb(' + ary.join(', ') + ')';
  }

  isLight() {
    const rgb = this.state.color;
    return rgb.reduce((a,b) => a+b) < 127 * 3;
  }

  applyColor() {
    const color = this.formatColor(this.state.color);
    document.body.style.background = color;
  }

  chooseColor() {
    const random = [];
    for (let i = 0; i < 3; i++) {
      random.push(Math.floor(Math.random()*256));
    }
    return random;
  }
  
  handleClick(){
    this.setState({ color: this.chooseColor() });
  }

  render() {
    return (
      <div>
        <h1 className={this.isLight() ? 'white' : 'black'}>
          Your color is {this.formatColor(this.state.color)}
        </h1>
        <Button onClick={this.handleClick} light={this.isLight()} />
      </div>
    );
  }
}

ReactDOM.render(
  <Random />, 
  document.getElementById('app')
);

$FILEEND

$FILE : Button.js
import React from 'react';

export class Button extends React.Component {
 render() {
  return (
   <button onClick={this.props.onClick}
    className={ this.props.light ? 'light-button' : 'dark-button' }>
    Refresh
   </button>
  );
 }
}
$FILEEND

$FILE: styles.css
html, body {
  margin: 0;
  height: 100%;
}

body {
  background-color: #ffffff;
  font-family: Helvetica, Arial, sans-serif;
  text-align: center;
}

#app {
  position: relative;
  height: 100%;
  width: 100%;
  padding-top: 10px;
}

#app div {
  width: 100%;
}

#app div div {
  height: 100%;
}

#app div div div {
  position: relative;
  height: auto;
}

h1, h2 {
  margin-left: 5%;
  margin-right: 5%;
}

button {
  border-radius: 8px;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  font-family: 'Oxygen', sans-serif;
  letter-spacing: 2px;
}

.black {
 color: black;
}

.white {
 color: white;
}

.light-button {
  background-color: rgba(255,255,255,0.5);
  color: rgb(0,0,0);
}

.dark-button {
  background-color: rgba(0,0,0,0.5);
  color: rgb(255,255,255);
}
$FILEEND

$FILE : index.html
<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="UTF-8">
 <link rel="stylesheet" href="./styles.css">
 <title>Random Color</title>
</head>
<body>
 <div id="app"></div>
 <script src="https://s3.amazonaws.com/codecademy-content/courses/React/react-course-bundle.min.js"></script>
 <script src="/Random.compiled.js"></script>
</body>
</html>
$FILEEND


$FILE : slides.html
<html>
<head>
    <title>Slides</title>
    <link rel="stylesheet" href="./styles/style.css"/>
</head>

<body>
    <div class="panel">
        <div id="slideWindow" class="slide">
            <div id="slideContent">

            </div>
        </div>
    </div>
    <div id="controlPanel" class="panel">
        <input type="button" id="btnPrev" class="button" value="< Prev" />
        <label id="lblSlideIndex" class="label white">1/1</label>
        <input type="button" id="btnNext" class="button" value="Next >" />
    </div>

    <slides class="hidden">
        <slide index="1">
            <div>
                <h2>
                    Sample Slide
                </h2>
                <h3>
                    By Prasanna Ashok
                </h3>
            </div>
        </slide>

        <slide index="2">
            <div>
                <h3>
                    Title 1
                </h3>
                <ul>
                    <li>Point 1</li>
                    <li>Point 2</li>
                    <li>Point 3</li>
                </ul>
            </div>
        </slide>

        <slide index="3">
            <div>
                <h3>
                    Title 2
                </h3>
                <ul>
                    <li>Point 4</li>
                    <li>Point 5</li>
                    <li>Point 6</li>
                </ul>
            </div>
        </slide>
        <slide index="4">
            <div>
                <h3>
                    Title 3
                </h3>
                <ul>
                    <li>Point 7</li>
                    <li>Point 8</li>
                    <li>Point 9</li>
                    <li>Point 10</li>
                </ul>
            </div>
        </slide>
        <slide index="5">
            <div>
                <h4>
                    Thank you
                </h4>
            </div>
        </slide>
    </slides>

    <script src="./scripts/script.js"></script>
</body>
</html>
$FILEEND
$FILE : style.css
.hidden {
    display: none;
}

.panel {
    background-color: darkgrey;
    width: 50%;
    height: 50%;
    padding: 20px;
}

#controlPanel {
    height: 50px;
    background-color: dimgrey;
}

.slide {
    width: 100%;
    height: 100%;
    background-color: white;

}

#slideContent{
    padding: 25px;
}

.button{
    font-size: large;
    padding: 5px;
    border-radius: 5px;
    cursor: pointer;    
}

.label {
    font-size: large;
    padding: 5px;
}

.white{
    color: white;
}
$FILEEND
$FILE : script.js
//alert('working');

let btnPrev = document.getElementById('btnPrev');
let btnNext = document.getElementById('btnNext');
let slideContent = document.getElementById('slideContent');
let lblSlideIndex = document.getElementById('lblSlideIndex');

let currSlideIndex = 1;

btnPrev.addEventListener('click', () => {
    navPrevSlide();
});

btnNext.addEventListener('click', () => {
    navNextSlide();
});

function navPrevSlide() {
    loadSlide(currSlideIndex - 1);
}

function navNextSlide() {
    loadSlide(currSlideIndex + 1);
}

function loadSlide(index) {
    let slides = Array.from(document.querySelector('slides').children);
    if (index < 1 || index > slides.length) {
        return;
    }
    slideContent.innerHTML = '';
    slideContent.appendChild(slides[index - 1].cloneNode(true));
    currSlideIndex = index;
    updateLabel(index, slides.length);
}

function updateLabel(index, count) {
    lblSlideIndex.innerText = index + ' / ' + count;
}

loadSlide(1);
$FILEEND
